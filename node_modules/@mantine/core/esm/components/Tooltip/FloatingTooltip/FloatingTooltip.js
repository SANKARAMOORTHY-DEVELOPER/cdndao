import React, { forwardRef, useRef, useState, useMemo, useEffect } from 'react';
import { getDefaultZIndex, useMantineDefaultProps } from '@mantine/styles';
import { useMergedRef, useMouse } from '@mantine/hooks';
import useStyles from './FloatingTooltip.styles.js';
import { Box } from '../../Box/Box.js';
import { Popper } from '../../Popper/Popper.js';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
const defaultProps = {
  openDelay: 0,
  closeDelay: 0,
  gutter: 0,
  color: "gray",
  disabled: false,
  position: "right",
  transition: "pop-top-left",
  transitionDuration: 0,
  zIndex: getDefaultZIndex("popover"),
  width: "auto",
  wrapLines: false,
  positionDependencies: [],
  withinPortal: true
};
const FloatingTooltip = forwardRef((props, ref) => {
  const _a = useMantineDefaultProps("FloatingTooltip", defaultProps, props), {
    className,
    label,
    children,
    openDelay,
    closeDelay,
    gutter,
    color,
    radius,
    disabled,
    position,
    transition,
    transitionDuration,
    zIndex,
    transitionTimingFunction,
    width,
    wrapLines,
    positionDependencies,
    withinPortal,
    tooltipRef,
    tooltipId,
    classNames,
    styles,
    onMouseLeave,
    onMouseEnter
  } = _a, others = __objRest(_a, [
    "className",
    "label",
    "children",
    "openDelay",
    "closeDelay",
    "gutter",
    "color",
    "radius",
    "disabled",
    "position",
    "transition",
    "transitionDuration",
    "zIndex",
    "transitionTimingFunction",
    "width",
    "wrapLines",
    "positionDependencies",
    "withinPortal",
    "tooltipRef",
    "tooltipId",
    "classNames",
    "styles",
    "onMouseLeave",
    "onMouseEnter"
  ]);
  const { classes, cx } = useStyles({ color, radius }, { classNames, styles, name: "FloatingTooltip" });
  const openTimeoutRef = useRef();
  const closeTimeoutRef = useRef();
  const _tooltipRef = useRef();
  const mergedTooltipRefs = useMergedRef(_tooltipRef, tooltipRef);
  const [opened, setOpened] = useState(false);
  const { ref: mouseRef, x, y } = useMouse();
  const visible = opened && !disabled;
  const [referenceElement, setReferenceElement] = useState(null);
  const mergedRefs = useMergedRef(ref, setReferenceElement, mouseRef);
  const coordinates = useMemo(() => {
    var _a2;
    const estimatedCursorSize = 32;
    const tooltipWidth = ((_a2 = _tooltipRef.current) == null ? void 0 : _a2.offsetWidth) || 0;
    switch (position) {
      case "top":
        return { x: x - tooltipWidth / 2, y: y - estimatedCursorSize };
      case "left":
        return { x: x - estimatedCursorSize / 2 - tooltipWidth, y };
      case "right":
        return { x: x + estimatedCursorSize / 2, y };
      case "bottom":
        return { x: x - tooltipWidth / 2, y: y + estimatedCursorSize };
      default:
        return { x: x || 0, y: y || 0 };
    }
  }, [x, y]);
  const handleOpen = () => {
    window.clearTimeout(closeTimeoutRef.current);
    if (openDelay !== 0) {
      openTimeoutRef.current = window.setTimeout(() => {
        setOpened(true);
      }, openDelay);
    } else {
      setOpened(true);
    }
  };
  const handleClose = () => {
    window.clearTimeout(openTimeoutRef.current);
    if (closeDelay !== 0) {
      closeTimeoutRef.current = window.setTimeout(() => {
        setOpened(false);
      }, closeDelay);
    } else {
      setOpened(false);
    }
  };
  useEffect(() => () => {
    window.clearTimeout(openTimeoutRef.current);
    window.clearTimeout(closeTimeoutRef.current);
  }, []);
  return /* @__PURE__ */ React.createElement(Box, __spreadValues({
    className: cx(classes.root, className),
    onMouseEnter: (event) => {
      handleOpen();
      typeof onMouseEnter === "function" && onMouseEnter(event);
    },
    onMouseLeave: (event) => {
      handleClose();
      typeof onMouseLeave === "function" && onMouseLeave(event);
    },
    onFocusCapture: handleOpen,
    onBlurCapture: handleClose,
    ref: mergedRefs
  }, others), /* @__PURE__ */ React.createElement(Popper, {
    referenceElement,
    transitionDuration,
    transition,
    mounted: visible,
    position: "top",
    placement: "start",
    gutter,
    zIndex,
    forceUpdateDependencies: [color, radius, ...positionDependencies],
    withinPortal,
    coordinates
  }, /* @__PURE__ */ React.createElement(Box, {
    className: classes.body,
    ref: mergedTooltipRefs,
    sx: {
      whiteSpace: wrapLines ? "normal" : "nowrap",
      width
    }
  }, label)), children);
});
FloatingTooltip.displayName = "@mantine/core/FloatingTooltip";

export { FloatingTooltip };
//# sourceMappingURL=FloatingTooltip.js.map
