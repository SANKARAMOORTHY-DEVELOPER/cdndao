import { isFormList } from '../form-list/form-list.js';
import { filterErrors } from '../filter-errors/filter-errors.js';
import { validateListValues } from './validate-list-values.js';

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
function validateRecordRules(rules, values) {
  return Object.keys(rules).reduce((acc, key) => {
    const rule = rules[key];
    if (isFormList(values[key])) {
      return __spreadValues(__spreadValues({}, acc), validateListValues(values, key, rules));
    }
    if (typeof rule === "function") {
      acc[key] = rule(values[key], values);
    }
    return acc;
  }, {});
}
function getValidationResults(errors) {
  const filteredErrors = filterErrors(errors);
  return { hasErrors: Object.keys(filteredErrors).length > 0, errors: filteredErrors };
}
function validateValues(rules, values) {
  if (rules === void 0 || rules === null) {
    return { hasErrors: false, errors: {} };
  }
  if (typeof rules === "function") {
    return getValidationResults(rules(values));
  }
  return getValidationResults(validateRecordRules(rules, values));
}
function validateFieldValue(field, rules, values) {
  const results = validateValues(rules, values);
  const hasError = field in results.errors;
  return { hasError, error: hasError ? results.errors[field] : null };
}

export { validateFieldValue, validateValues };
//# sourceMappingURL=validate-values.js.map
