/// <reference types="react" />
import { FormList } from './form-list/form-list';
import type { FormErrors, FormRules, FormValidationResult, FormFieldValidationResult, GetInputProps, GetInputPropsFieldType } from './types';
export interface UseFormInput<T> {
    initialValues: T;
    initialErrors?: FormErrors;
    validate?: FormRules<T>;
    schema?: (values: Record<string, any>) => FormErrors;
}
export interface UseFormReturnType<T> {
    values: T;
    setValues: React.Dispatch<React.SetStateAction<T>>;
    setFieldValue: <K extends keyof T, V extends T[K]>(field: K, value: V) => void;
    errors: FormErrors;
    setErrors: React.Dispatch<React.SetStateAction<FormErrors>>;
    setFieldError: <K extends keyof T>(field: K, error: React.ReactNode) => void;
    clearFieldError: <K extends keyof T>(field: K) => void;
    clearErrors(): void;
    setListItem: <K extends keyof T, V extends T[K]>(field: K, index: number, value: V extends FormList<infer U> ? U : never) => void;
    addListItem: <K extends keyof T, V extends T[K]>(field: K, payload: V extends FormList<infer U> ? U : never) => void;
    removeListItem: <K extends keyof T>(field: K, indices: number[] | number) => void;
    reorderListItem: <K extends keyof T>(field: K, payload: {
        from: number;
        to: number;
    }) => void;
    validate(): FormValidationResult;
    validateField: (field: string) => FormFieldValidationResult;
    onSubmit(handleSubmit: (values: T, event: React.FormEvent) => void): (event?: React.FormEvent) => void;
    reset(): void;
    getInputProps: <K extends keyof T, L extends GetInputPropsFieldType = 'input'>(field: K, options?: {
        type?: L;
        withError?: boolean;
    }) => GetInputProps<L>;
    getListInputProps: <K extends keyof T, U extends T[K], L extends GetInputPropsFieldType = 'input'>(field: K, index: number, listField: U extends FormList<infer V> ? keyof V : never, options?: {
        type?: L;
        withError?: boolean;
    }) => GetInputProps<L>;
}
export declare function useForm<T extends {
    [key: string]: any;
}>({ initialValues, initialErrors, validate: rules, schema, }: UseFormInput<T>): UseFormReturnType<T>;
//# sourceMappingURL=use-form.d.ts.map