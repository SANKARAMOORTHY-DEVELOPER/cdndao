'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
var formList = require('./form-list/form-list.js');
var validateValues = require('./validate-values/validate-values.js');
var filterErrors = require('./filter-errors/filter-errors.js');
var getInputOnChange = require('./get-input-on-change/get-input-on-change.js');
var getErrorPath = require('./get-error-path/get-error-path.js');

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
function useForm({
  initialValues,
  initialErrors,
  validate: rules,
  schema
}) {
  const [errors, setErrors] = react.useState(filterErrors.filterErrors(initialErrors));
  const [values, setValues] = react.useState(initialValues);
  const clearErrors = () => setErrors({});
  const setFieldError = (field, error) => setErrors((current) => __spreadProps(__spreadValues({}, current), { [field]: error }));
  const clearFieldError = (field) => setErrors((current) => {
    const clone = __spreadValues({}, current);
    delete clone[field];
    return clone;
  });
  const setFieldValue = (field, value) => {
    setValues((currentValues) => __spreadProps(__spreadValues({}, currentValues), { [field]: value }));
    clearFieldError(field);
  };
  const setListItem = (field, index, value) => {
    const list = values[field];
    if (formList.isFormList(list) && list[index] !== void 0) {
      const cloned = [...list];
      cloned[index] = value;
      setFieldValue(field, formList.formList(cloned));
    }
  };
  const removeListItem = (field, indices) => {
    const list = values[field];
    if (formList.isFormList(list)) {
      setFieldValue(field, formList.formList(list.filter((_, index) => Array.isArray(indices) ? !indices.includes(index) : indices !== index)));
    }
  };
  const addListItem = (field, payload) => {
    const list = values[field];
    if (formList.isFormList(list)) {
      setFieldValue(field, formList.formList([...list, payload]));
    }
  };
  const reorderListItem = (field, { from, to }) => {
    const list = values[field];
    if (formList.isFormList(list) && list[from] !== void 0 && list[to] !== void 0) {
      const cloned = [...list];
      const item = list[from];
      cloned.splice(from, 1);
      cloned.splice(to, 0, item);
      setFieldValue(field, formList.formList(cloned));
    }
  };
  const validate = () => {
    const results = validateValues.validateValues(schema || rules, values);
    setErrors(results.errors);
    return results;
  };
  const validateField = (field) => {
    const results = validateValues.validateFieldValue(field, schema || rules, values);
    results.hasError ? setFieldError(field, results.error) : clearFieldError(field);
    return results;
  };
  const onSubmit = (handleSubmit) => (event) => {
    event.preventDefault();
    const results = validate();
    !results.hasErrors && handleSubmit(values, event);
  };
  const reset = () => {
    setValues(initialValues);
    clearErrors();
  };
  const getInputProps = (field, { type, withError = true } = {}) => {
    const value = values[field];
    const onChange = getInputOnChange.getInputOnChange((val) => setFieldValue(field, val));
    const payload = type === "checkbox" ? { checked: value, onChange } : { value, onChange };
    if (withError && errors[field]) {
      payload.error = errors[field];
    }
    return payload;
  };
  const getListInputProps = (field, index, listField, { type, withError = true } = {}) => {
    const list = values[field];
    if (formList.isFormList(list) && list[index] && listField in list[index]) {
      const listValue = list[index];
      const value = listValue[listField];
      const onChange = getInputOnChange.getInputOnChange((val) => setListItem(field, index, __spreadProps(__spreadValues({}, listValue), { [listField]: val })));
      const payload = type === "checkbox" ? { checked: value, onChange } : { value, onChange };
      const error = errors[getErrorPath.getErrorPath([field, index, listField])];
      if (withError && error) {
        payload.error = error;
      }
      return payload;
    }
    return {};
  };
  return {
    values,
    setValues,
    setFieldValue,
    errors,
    setErrors,
    clearErrors,
    clearFieldError,
    setFieldError,
    setListItem,
    removeListItem,
    addListItem,
    reorderListItem,
    validate,
    validateField,
    onSubmit,
    reset,
    getInputProps,
    getListInputProps
  };
}

exports.useForm = useForm;
//# sourceMappingURL=use-form.js.map
